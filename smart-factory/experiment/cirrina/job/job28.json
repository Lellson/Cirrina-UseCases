{
    "localData": {
        "partsPerProduct": 10
    },
    "bindEventInstanceIds": [],
    "collaborativeStateMachine": {
        "version": "0.1",
        "name": "Industrial automation",
        "persistentContext": {
            "variables": [
                {
                    "name": "productsCompleted",
                    "value": "0"
                },
                {
                    "name": "jobDone",
                    "value": "false"
                },
                {
                    "name": "log",
                    "value": "[...]"
                }
            ]
        },
        "stateMachines": [
            {
                "name": "jobControlSystem",
                "localContext": {
                    "variables": [
                        {
                            "name": "totalProducts",
                            "value": "1"
                        }
                    ]
                },
                "states": [
                    {
                        "name": "starting",
                        "initial": true,
                        "entry": [
                            {
                                "type": "match",
                                "value": "productsCompleted >= totalProducts || jobDone",
                                "cases": [
                                    {
                                        "case": "true",
                                        "action": {
                                            "type": "assign",
                                            "variable": {
                                                "name": "productsCompleted",
                                                "value": "0"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "assign",
                                "variable": {
                                    "name": "jobDone",
                                    "value": "false"
                                }
                            },
                            {
                                "type": "raise",
                                "event": {
                                    "name": "eProcessMessage",
                                    "data": [
                                        {
                                            "name": "msg",
                                            "value": "'Job started. Producing ' + totalProducts + ' products.'"
                                        }
                                    ],
                                    "channel": "global"
                                }
                            }
                        ],
                        "always": [
                            {
                                "target": "running"
                            }
                        ]
                    },
                    {
                        "name": "running",
                        "initial": false,
                        "on": [
                            {
                                "event": "eProductComplete",
                                "actions": [
                                    {
                                        "type": "assign",
                                        "variable": {
                                            "name": "productsCompleted",
                                            "value": "productsCompleted + 1"
                                        }
                                    },
                                    {
                                        "type": "raise",
                                        "event": {
                                            "name": "eCheckJobDone",
                                            "channel": "internal"
                                        }
                                    }
                                ]
                            },
                            {
                                "event": "eCheckJobDone",
                                "target": "jobDone",
                                "guards": [
                                    {
                                        "expression": "productsCompleted >= totalProducts"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "jobDone",
                        "initial": false,
                        "terminal": true,
                        "entry": [
                            {
                                "type": "assign",
                                "variable": {
                                    "name": "jobDone",
                                    "value": "true"
                                }
                            },
                            {
                                "type": "raise",
                                "event": {
                                    "name": "eProcessMessage",
                                    "data": [
                                        {
                                            "name": "msg",
                                            "value": "'Job done! Produced ' + productsCompleted + ' products.'"
                                        }
                                    ],
                                    "channel": "global"
                                }
                            },
                            {
                                "type": "raise",
                                "event": {
                                    "name": "eJobDone",
                                    "channel": "global"
                                }
                            }
                        ]
                    }
                ]
            },
            {
                "name": "conveyorBeltSystem",
                "localContext": {
                    "variables": [
                        {
                            "name": "isScanning",
                            "value": "false"
                        },
                        {
                            "name": "isUnloading",
                            "value": "false"
                        }
                    ]
                },
                "states": [
                    {
                        "name": "loading",
                        "initial": true,
                        "on": [
                            {
                                "event": "eObjectInvalid",
                                "target": "error"
                            },
                            {
                                "event": "eObjectValid",
                                "target": "transporting"
                            },
                            {
                                "event": "eJobDone",
                                "target": "jobDone"
                            }
                        ],
                        "exit": [
                            {
                                "type": "raise",
                                "event": {
                                    "name": "eScanned",
                                    "channel": "global"
                                }
                            }
                        ]
                    },
                    {
                        "name": "error",
                        "initial": false,
                        "entry": [
                            {
                                "type": "raise",
                                "event": {
                                    "name": "eProcessMessage",
                                    "data": [
                                        {
                                            "name": "msg",
                                            "value": "'Invalid object detected'"
                                        }
                                    ],
                                    "channel": "global"
                                }
                            }
                        ],
                        "on": [
                            {
                                "event": "eObjectValid",
                                "target": "transporting"
                            },
                            {
                                "event": "eJobDone",
                                "target": "jobDone"
                            }
                        ]
                    },
                    {
                        "name": "transporting",
                        "initial": false,
                        "entry": [
                            {
                                "type": "invoke",
                                "serviceType": "moveBelt"
                            }
                        ],
                        "exit": [
                            {
                                "type": "invoke",
                                "serviceType": "stopBelt"
                            }
                        ],
                        "on": [
                            {
                                "event": "eStartUnload",
                                "target": "unloading",
                                "actions": [
                                    {
                                        "type": "assign",
                                        "variable": {
                                            "name": "isUnloading",
                                            "value": "true"
                                        }
                                    }
                                ]
                            },
                            {
                                "event": "eJobDone",
                                "target": "jobDone"
                            }
                        ]
                    },
                    {
                        "name": "unloading",
                        "initial": false,
                        "entry": [
                            {
                                "type": "raise",
                                "event": {
                                    "name": "eArmPickup",
                                    "channel": "global"
                                }
                            }
                        ],
                        "after": [
                            {
                                "name": "roboticArmSystem.triggerPickup",
                                "type": "timeout",
                                "delay": "1000",
                                "action": {
                                    "type": "raise",
                                    "event": {
                                        "name": "eArmPickup",
                                        "channel": "global"
                                    }
                                }
                            }
                        ],
                        "on": [
                            {
                                "event": "ePickedUp",
                                "target": "loading",
                                "actions": [
                                    {
                                        "type": "assign",
                                        "variable": {
                                            "name": "isUnloading",
                                            "value": "false"
                                        }
                                    }
                                ]
                            },
                            {
                                "event": "eJobDone",
                                "target": "jobDone",
                                "actions": [
                                    {
                                        "type": "assign",
                                        "variable": {
                                            "name": "isUnloading",
                                            "value": "false"
                                        }
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "jobDone",
                        "initial": false,
                        "terminal": true
                    },
                    {
                        "name": "cameraSensorSystem",
                        "localContext": {
                            "variables": [
                                {
                                    "name": "validObject",
                                    "value": "false"
                                },
                                {
                                    "name": "photoPath",
                                    "value": "''"
                                }
                            ]
                        },
                        "states": [
                            {
                                "name": "idle",
                                "initial": true,
                                "on": [
                                    {
                                        "event": "eStartScan",
                                        "target": "scanning",
                                        "actions": [
                                            {
                                                "type": "assign",
                                                "variable": {
                                                    "name": "isScanning",
                                                    "value": "true"
                                                }
                                            }
                                        ],
                                        "guards": [
                                            {
                                                "expression": "!isScanning"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "name": "scanning",
                                "initial": false,
                                "entry": [
                                    {
                                        "type": "invoke",
                                        "serviceType": "takePhoto",
                                        "output": [
                                            {
                                                "reference": "photoPath"
                                            }
                                        ]
                                    },
                                    {
                                        "type": "invoke",
                                        "serviceType": "scanPhoto",
                                        "input": [
                                            {
                                                "name": "photoPath",
                                                "value": "photoPath"
                                            }
                                        ],
                                        "output": [
                                            {
                                                "reference": "validObject"
                                            }
                                        ],
                                        "done": [
                                            {
                                                "name": "eCheckValidObject",
                                                "channel": "internal"
                                            }
                                        ]
                                    }
                                ],
                                "exit": [
                                    {
                                        "type": "assign",
                                        "variable": {
                                            "name": "isScanning",
                                            "value": "false"
                                        }
                                    }
                                ],
                                "on": [
                                    {
                                        "event": "eCheckValidObject",
                                        "target": "idle",
                                        "actions": [
                                            {
                                                "type": "match",
                                                "value": "validObject",
                                                "cases": [
                                                    {
                                                        "case": "false",
                                                        "action": {
                                                            "type": "raise",
                                                            "event": {
                                                                "name": "eObjectInvalid",
                                                                "channel": "global"
                                                            }
                                                        }
                                                    },
                                                    {
                                                        "case": "true",
                                                        "action": {
                                                            "type": "raise",
                                                            "event": {
                                                                "name": "eObjectValid",
                                                                "channel": "global"
                                                            }
                                                        }
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "photoelectricSensor",
                        "abstract": true,
                        "localContext": {
                            "variables": [
                                {
                                    "name": "isBeamInterrupted",
                                    "value": "false"
                                }
                            ]
                        },
                        "states": [
                            {
                                "name": "idle",
                                "initial": true,
                                "virtual": true,
                                "on": [
                                    {
                                        "event": "eBeamDetection",
                                        "target": "detecting",
                                        "guards": [
                                            {
                                                "reference": "guard.allowBeamDetection"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "name": "detecting",
                                "initial": false,
                                "virtual": true,
                                "on": [
                                    {
                                        "event": "eCheckBeamDetection",
                                        "target": "detected",
                                        "guards": [
                                            {
                                                "expression": "isBeamInterrupted"
                                            }
                                        ],
                                        "else": "idle"
                                    }
                                ]
                            },
                            {
                                "name": "detected",
                                "initial": false,
                                "entry": [
                                    {
                                        "reference": "action.onDetected"
                                    }
                                ],
                                "always": [
                                    {
                                        "target": "idle",
                                        "actions": [
                                            {
                                                "type": "assign",
                                                "variable": {
                                                    "name": "isBeamInterrupted",
                                                    "value": "false"
                                                }
                                            }
                                        ]
                                    }
                                ]
                            }
                        ],
                        "guards": [
                            {
                                "name": "guard.allowBeamDetection",
                                "expression": "!isUnloading"
                            }
                        ],
                        "actions": [
                            {
                                "name": "action.onDetected",
                                "type": "raise",
                                "event": {
                                    "name": "eNoOp",
                                    "channel": "internal"
                                }
                            }
                        ]
                    },
                    {
                        "name": "photoelectricSensorStart",
                        "extends": "photoelectricSensor",
                        "states": [
                            {
                                "name": "idle",
                                "after": [
                                    {
                                        "name": "startTriggerBeamDetection",
                                        "type": "timeout",
                                        "delay": "10",
                                        "action": {
                                            "type": "raise",
                                            "event": {
                                                "name": "eBeamDetection",
                                                "channel": "internal"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "detecting",
                                "entry": [
                                    {
                                        "type": "invoke",
                                        "serviceType": "beamDetectionStart",
                                        "output": [
                                            {
                                                "reference": "isBeamInterrupted"
                                            }
                                        ],
                                        "done": [
                                            {
                                                "name": "eCheckBeamDetection",
                                                "channel": "internal"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ],
                        "guards": [
                            {
                                "name": "guard.allowBeamDetection",
                                "expression": "!isUnloading && !isScanning"
                            }
                        ],
                        "actions": [
                            {
                                "name": "action.onDetected",
                                "type": "raise",
                                "event": {
                                    "name": "eStartScan",
                                    "channel": "global"
                                }
                            }
                        ]
                    },
                    {
                        "name": "photoelectricSensorEnd",
                        "extends": "photoelectricSensor",
                        "states": [
                            {
                                "name": "idle",
                                "after": [
                                    {
                                        "name": "endTriggerBeamDetection",
                                        "type": "timeout",
                                        "delay": "10",
                                        "action": {
                                            "type": "raise",
                                            "event": {
                                                "name": "eBeamDetection",
                                                "channel": "internal"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "name": "detecting",
                                "entry": [
                                    {
                                        "type": "invoke",
                                        "serviceType": "beamDetectionEnd",
                                        "output": [
                                            {
                                                "reference": "isBeamInterrupted"
                                            }
                                        ],
                                        "done": [
                                            {
                                                "name": "eCheckBeamDetection",
                                                "channel": "internal"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ],
                        "guards": [
                            {
                                "name": "guard.allowBeamDetection",
                                "expression": "!isUnloading"
                            }
                        ],
                        "actions": [
                            {
                                "name": "action.onDetected",
                                "type": "raise",
                                "event": {
                                    "name": "eStartUnload",
                                    "channel": "global"
                                }
                            }
                        ]
                    }
                ]
            },
            {
                "name": "roboticArmSystem",
                "localContext": {
                    "variables": [
                        {
                            "name": "pickUpSuccess",
                            "value": "true"
                        },
                        {
                            "name": "assembleSuccess",
                            "value": "true"
                        },
                        {
                            "name": "partsAssembled",
                            "value": "0"
                        },
                        {
                            "name": "partsPerProduct",
                            "value": "4"
                        },
                        {
                            "name": "errorMsg",
                            "value": "''"
                        }
                    ]
                },
                "states": [
                    {
                        "name": "idle",
                        "initial": true,
                        "on": [
                            {
                                "event": "eArmPickup",
                                "target": "pickup",
                                "guards": [
                                    {
                                        "expression": "!jobDone"
                                    }
                                ]
                            },
                            {
                                "event": "eJobDone",
                                "target": "jobDone"
                            }
                        ],
                        "always": [
                            {
                                "target": "pickup",
                                "guards": [
                                    {
                                        "expression": "!pickUpSuccess"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "name": "error",
                        "initial": false,
                        "entry": [
                            {
                                "type": "raise",
                                "event": {
                                    "name": "eProcessMessage",
                                    "data": [
                                        {
                                            "name": "msg",
                                            "value": "'Fatal robotic arm failure: ' + errorMsg"
                                        }
                                    ],
                                    "channel": "global"
                                }
                            }
                        ],
                        "after": [
                            {
                                "name": "triggerRetry",
                                "type": "timeout",
                                "delay": "1000",
                                "action": {
                                    "type": "raise",
                                    "event": {
                                        "name": "eRetry",
                                        "channel": "internal"
                                    }
                                }
                            }
                        ],
                        "on": [
                            {
                                "event": "eRetry",
                                "target": "assemble",
                                "guards": [
                                    {
                                        "expression": "pickUpSuccess"
                                    }
                                ],
                                "else": "return"
                            },
                            {
                                "event": "eJobDone",
                                "target": "jobDone"
                            }
                        ]
                    },
                    {
                        "name": "pickup",
                        "initial": false,
                        "entry": [
                            {
                                "type": "invoke",
                                "serviceType": "pickUp",
                                "output": [
                                    {
                                        "reference": "pickUpSuccess"
                                    }
                                ]
                            },
                            {
                                "type": "match",
                                "value": "pickUpSuccess",
                                "cases": [
                                    {
                                        "case": "false",
                                        "action": {
                                            "type": "assign",
                                            "variable": {
                                                "name": "errorMsg",
                                                "value": "'Pickup failed'"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "raise",
                                "event": {
                                    "name": "eCheckPickUpSuccess",
                                    "channel": "internal"
                                }
                            }
                        ],
                        "on": [
                            {
                                "event": "eCheckPickUpSuccess",
                                "target": "assemble",
                                "guards": [
                                    {
                                        "expression": "pickUpSuccess"
                                    }
                                ],
                                "actions": [
                                    {
                                        "type": "raise",
                                        "event": {
                                            "name": "ePickedUp",
                                            "channel": "global"
                                        }
                                    }
                                ],
                                "else": "error"
                            }
                        ]
                    },
                    {
                        "name": "assemble",
                        "initial": false,
                        "entry": [
                            {
                                "type": "invoke",
                                "serviceType": "assemble",
                                "output": [
                                    {
                                        "reference": "assembleSuccess"
                                    }
                                ]
                            },
                            {
                                "type": "match",
                                "value": "assembleSuccess",
                                "cases": [
                                    {
                                        "case": "false",
                                        "action": {
                                            "type": "assign",
                                            "variable": {
                                                "name": "errorMsg",
                                                "value": "'Assemble failed'"
                                            }
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "raise",
                                "event": {
                                    "name": "eCheckAssembleSuccess",
                                    "channel": "internal"
                                }
                            }
                        ],
                        "on": [
                            {
                                "event": "eCheckAssembleSuccess",
                                "target": "return",
                                "guards": [
                                    {
                                        "expression": "assembleSuccess"
                                    }
                                ],
                                "actions": [
                                    {
                                        "type": "assign",
                                        "variable": {
                                            "name": "partsAssembled",
                                            "value": "partsAssembled + 1"
                                        }
                                    },
                                    {
                                        "type": "raise",
                                        "event": {
                                            "name": "eAssembleComplete",
                                            "channel": "global"
                                        }
                                    }
                                ],
                                "else": "error"
                            }
                        ]
                    },
                    {
                        "name": "return",
                        "initial": false,
                        "entry": [
                            {
                                "type": "invoke",
                                "serviceType": "returnToStart"
                            }
                        ],
                        "always": [
                            {
                                "target": "idle",
                                "guards": [
                                    {
                                        "expression": "partsAssembled >= partsPerProduct"
                                    }
                                ],
                                "actions": [
                                    {
                                        "type": "assign",
                                        "variable": {
                                            "name": "partsAssembled",
                                            "value": "0"
                                        }
                                    },
                                    {
                                        "type": "raise",
                                        "event": {
                                            "name": "eProductComplete",
                                            "channel": "global"
                                        }
                                    }
                                ],
                                "else": "idle"
                            }
                        ]
                    },
                    {
                        "name": "jobDone",
                        "initial": false,
                        "terminal": true
                    }
                ]
            }
        ]
    },
    "serviceImplementations": [
        {
            "type": "HTTP",
            "scheme": "http",
            "host": "node4.site3.grid5000.fr",
            "port": 8000,
            "endPoint": "/stopBelt",
            "method": "POST",
            "name": "stopBelt",
            "cost": 1.0,
            "local": false
        },
        {
            "type": "HTTP",
            "scheme": "http",
            "host": "node4.site3.grid5000.fr",
            "port": 8000,
            "endPoint": "/moveBelt",
            "method": "POST",
            "name": "moveBelt",
            "cost": 1.0,
            "local": false
        },
        {
            "type": "HTTP",
            "scheme": "http",
            "host": "node4.site3.grid5000.fr",
            "port": 8000,
            "endPoint": "/sendSms",
            "method": "POST",
            "name": "sendSms",
            "cost": 1.0,
            "local": false
        },
        {
            "type": "HTTP",
            "scheme": "http",
            "host": "node4.site3.grid5000.fr",
            "port": 8000,
            "endPoint": "/beamDetectionStart",
            "method": "POST",
            "name": "beamDetectionStart",
            "cost": 1.0,
            "local": false
        },
        {
            "type": "HTTP",
            "scheme": "http",
            "host": "node4.site3.grid5000.fr",
            "port": 8000,
            "endPoint": "/sendStatistics",
            "method": "POST",
            "name": "sendStatistics",
            "cost": 1.0,
            "local": false
        },
        {
            "type": "HTTP",
            "scheme": "http",
            "host": "node4.site3.grid5000.fr",
            "port": 8000,
            "endPoint": "/sendMail",
            "method": "POST",
            "name": "sendMail",
            "cost": 1.0,
            "local": false
        },
        {
            "type": "HTTP",
            "scheme": "http",
            "host": "node4.site3.grid5000.fr",
            "port": 8000,
            "endPoint": "/scanPhoto",
            "method": "POST",
            "name": "scanPhoto",
            "cost": 1.0,
            "local": false
        },
        {
            "type": "HTTP",
            "scheme": "http",
            "host": "node4.site3.grid5000.fr",
            "port": 8000,
            "endPoint": "/pickUp",
            "method": "POST",
            "name": "pickUp",
            "cost": 1.0,
            "local": false
        },
        {
            "type": "HTTP",
            "scheme": "http",
            "host": "node4.site3.grid5000.fr",
            "port": 8000,
            "endPoint": "/beamDetectionEnd",
            "method": "POST",
            "name": "beamDetectionEnd",
            "cost": 1.0,
            "local": false
        },
        {
            "type": "HTTP",
            "scheme": "http",
            "host": "node4.site3.grid5000.fr",
            "port": 8000,
            "endPoint": "/takePhoto",
            "method": "POST",
            "name": "takePhoto",
            "cost": 1.0,
            "local": false
        },
        {
            "type": "HTTP",
            "scheme": "http",
            "host": "node4.site3.grid5000.fr",
            "port": 8000,
            "endPoint": "/assemble",
            "method": "POST",
            "name": "assemble",
            "cost": 1.0,
            "local": false
        },
        {
            "type": "HTTP",
            "scheme": "http",
            "host": "node4.site3.grid5000.fr",
            "port": 8000,
            "endPoint": "/returnToStart",
            "method": "POST",
            "name": "returnToStart",
            "cost": 1.0,
            "local": false
        }
    ],
    "stateMachineName": "roboticArmSystem",
    "runtimeName": "runtime2"
}