# SERVICES

# Generate OpenAPIs with operationId
mp.openapi.extensions.smallrye.operationIdStrategy=METHOD
quarkus.swagger-ui.always-include=true

# Service URLs (Adjust if simulation-server is not run locally). 
# Used in SmartFactoryWorkItemConfig.
quarkus.rest-client."services_json".url=http://localhost:8000

servicePickUp.url=http://localhost:8000/pickUp
serviceAssemble.url=http://localhost:8000/assemble
serviceReturnToStart.url=http://localhost:8000/returnToStart
serviceBeamDetectionStart.url=http://localhost:8000/beamDetectionStart
serviceBeamDetectionEnd.url=http://localhost:8000/beamDetectionEnd
serviceTakePhoto.url=http://localhost:8000/takePhoto
serviceScanPhoto.url=http://localhost:8000/scanPhoto
serviceMoveBelt.url=http://localhost:8000/moveBelt
serviceStopBelt.url=http://localhost:8000/stopBelt

# PERSISTENCE

kogito.persistence.type=jdbc
kogito.persistence.optimistic.lock=true
#quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/hibernate_orm_test

# run create tables scripts
quarkus.flyway.migrate-at-start=true
quarkus.datasource.db-kind=postgresql

# EVENTING

#If KNative eventing, change to ${K_SINK:http://localhost:8181}
mp.messaging.outgoing.kogito_outgoing_stream.url=http://localhost:${quarkus.http.port}

mp.messaging.outgoing.kogito_outgoing_stream.connector=quarkus-http
mp.messaging.outgoing.kogito_outgoing_stream.path=/

kogito.addon.messaging.outgoing.cloudEventMode.kogito_outgoing_stream=structured

mp.messaging.incoming.kogito_incoming_stream.connector=quarkus-http
mp.messaging.incoming.kogito_incoming_stream.path=/

# KNative eventing
org.kie.kogito.addons.knative.eventing.generate-kogito-source=true
kogito.jobs-service.knative-events=true

# Should be 'true', but seems to be bugged in Sonataflow 999-SNAPSHOT
kogito.events.variables.enabled=false

%knative.quarkus.container-image.group=dev.local
%knative.quarkus.kubernetes.deployment-target=knative
quarkus.knative.image-pull-policy=IfNotPresent

# containerization, use with container profile: mvn ... -Dcontainer
%container.quarkus.container-image.build=true
%container.quarkus.container-image.push=false
%container.quarkus.container-image.group=${USER}
%container.quarkus.container-image.registry=dev.local
%container.quarkus.container-image.tag=1.0-SNAPSHOT

# Tracing
#quarkus.log.category."org.kie.kogito.event.impl".level=TRACE
#quarkus.log.min-level=TRACE

# Outgoing events for process instance, user task instance and variables
#mp.messaging.outgoing.kogito-processinstances-events.connector=quarkus-http
#mp.messaging.outgoing.kogito-processinstances-events.url=http://localhost:${quarkus.http.port}
#mp.messaging.outgoing.kogito-usertaskinstances-events.connector=quarkus-http
#mp.messaging.outgoing.kogito-usertaskinstances-events.url=http://localhost:${quarkus.http.port}
#mp.messaging.outgoing.kogito-variables-events.connector=quarkus-http
#mp.messaging.outgoing.kogito-variables-events.url=http://localhost:${quarkus.http.port}

# Incoming/Outgoing event: product-complete (for job_control_system workflow)
#mp.messaging.incoming.product-complete.connector=quarkus-http
#mp.messaging.incoming.product-complete.path=/
#mp.messaging.incoming.product-complete.method=POST
#mp.messaging.incoming.product-complete.url=http://localhost:${quarkus.http.port}

#mp.messaging.outgoing.product-complete.connector=quarkus-http
#mp.messaging.outgoing.product-complete.path=/
#mp.messaging.outgoing.product-complete.method=POST
#mp.messaging.outgoing.product-complete.url=http://localhost:${quarkus.http.port}

# Outgoing event: job-done (for job_control_system workflow)
#mp.messaging.outgoing.job-done.connector=quarkus-http
#mp.messaging.outgoing.job-done.path=/
#mp.messaging.outgoing.job-done.method=POST
#mp.messaging.outgoing.job-done.url=http://localhost:${quarkus.http.port}