# CloudEvent endpoint
# Defines the connector and path for the "kogito_incoming_stream" channel/endpoint
mp.messaging.incoming.kogito_incoming_stream.connector=smallrye-kafka
mp.messaging.incoming.kogito_incoming_stream.topic=swfincomingstream
mp.messaging.incoming.kogito_incoming_stream.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer 

kogito.addon.messaging.outgoing.cloudEventMode.kogito_outgoing_stream=structured

#Persistence configuration
kogito.persistence.type=jdbc
kogito.persistence.optimistic.lock=true

# run create tables scripts
quarkus.flyway.migrate-at-start=true
quarkus.datasource.db-kind=postgresql


# Generate OpenAPIs with operationId
mp.openapi.extensions.smallrye.operationIdStrategy=METHOD

# OpenAPIs endpoint
quarkus.rest-client."supplier_yaml".url=http://localhost:${quarkus.http.port}

# Tracing
# quarkus.log.category."org.kie.kogito.event.impl".level=TRACE
# quarkus.log.min-level=TRACE

# KNative eventing
org.kie.kogito.addons.knative.eventing.generate-kogito-source=true
quarkus.swagger-ui.always-include=true

# Outgoing events for process instance, user task instance and variables
mp.messaging.outgoing.kogito-processinstances-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-processinstances-events.topic=processinstances
mp.messaging.outgoing.kogito-processinstances-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.kogito-usertaskinstances-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-usertaskinstances-events.topic=usertaskinstances
mp.messaging.outgoing.kogito-usertaskinstances-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.kogito-variables-events.connector=smallrye-kafka
mp.messaging.outgoing.kogito-variables-events.topic=variables
mp.messaging.outgoing.kogito-variables-events.value.serializer=org.apache.kafka.common.serialization.StringSerializer

# Incoming event: product-complete (for job_control_system workflow)
mp.messaging.incoming.product-complete.connector=smallrye-kafka
mp.messaging.incoming.product-complete.topic=product_complete
mp.messaging.incoming.product-complete.cloud-events-mode=structured
mp.messaging.incoming.product-complete.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer 
# io.cloudevents.kafka.CloudEventSerializer
mp.messaging.incoming.product-complete.cloud-events-source=global
mp.messaging.incoming.product-complete.cloud-events-type=ProductCompleteType
mp.messaging.incoming.product-complete.cloud-events-subject=product-complete

# Outgoing event: job-done (for job_control_system workflow)
mp.messaging.outgoing.job-done.connector=smallrye-kafka
mp.messaging.outgoing.job-done.topic=job_done
mp.messaging.outgoing.job-done.cloud-events-mode=structured
mp.messaging.outgoing.job-done.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.job-done.cloud-events-source=global
mp.messaging.outgoing.job-done.cloud-events-type=JobDoneType
mp.messaging.outgoing.job-done.cloud-events-subject=job-done

# Outgoing event: product-complete (for product_complete workflow)
mp.messaging.outgoing.product-complete2.connector=smallrye-kafka
mp.messaging.outgoing.product-complete2.topic=product_complete2
mp.messaging.outgoing.product-complete2.cloud-events-mode=structured
mp.messaging.outgoing.product-complete2.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.product-complete2.cloud-events-source=global
mp.messaging.outgoing.product-complete2.cloud-events-type=ProductCompleteType
mp.messaging.outgoing.product-complete2.cloud-events-subject=product-complete2

# Kafka

kogito.addon.messaging.incoming.defaultName=swfincoming
kogito.addon.messaging.outgoing.defaultName=swfoutgoing