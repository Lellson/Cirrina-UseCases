- name: Install Docker
  apt:
    name: docker.io
    state: present
    update_cache: true
  become: true

- name: Ensure Docker is started and enabled
  service:
    name: docker
    state: started
    enabled: true
  become: true

# InfluxDB
- name: Create InfluxDB data directory
  file:
    path: /var/lib/influxdb2
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Create InfluxDB configuration directory
  file:
    path: /etc/influxdb2
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Run InfluxDB server in Docker
  docker_container:
    name: influxdb
    image: influxdb:2
    state: started
    recreate: true
    force_kill: true
    pull: true
    ports:
      - "8086:8086"
    volumes:
      - "/var/lib/influxdb2:/var/lib/influxdb2"
      - "/etc/influxdb2:/etc/influxdb2"
    env:
      TZ: "Europe/Paris"
      DOCKER_INFLUXDB_INIT_MODE: "setup"
      DOCKER_INFLUXDB_INIT_USERNAME: "admin"
      DOCKER_INFLUXDB_INIT_PASSWORD: "adminadmin"
      DOCKER_INFLUXDB_INIT_ORG: "org"
      DOCKER_INFLUXDB_INIT_BUCKET: "bucket"
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: "bzO10KmR8x"
  become: true
  register: influxdb_container

# Telegraf
- name: Create Telegraf configuration directory
  file:
    path: /etc/telegraf
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Generate Telegraf configuration file
  template:
    src: telegraf.conf.j2
    dest: /etc/telegraf/telegraf.conf
    owner: root
    group: root
    mode: "0644"
  vars:
    influxdb_url: "{{ hostvars[inventory_hostname]['INFLUXDB_URL'] }}"

- name: Run Telegraf server in Docker
  docker_container:
    name: telegraf
    image: telegraf:latest
    state: started
    recreate: true
    force_kill: true
    pull: true
    ports:
      - "4317:4317"
    volumes:
      - /etc/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
    env:
      TZ: "Europe/Paris"
  become: true
  register: telegraf_container

# Simulation
- name: Run simulation script in Docker
  docker_container:
    name: simulation
    image: "marlonetheredgeuibk/cirrina-examples-railway-simulate-sensors:develop"
    state: started
    recreate: true
    force_kill: true
    pull: true
    env:
      TZ: "Europe/Paris"
      OTLP_ENDPOINT: "{{ hostvars[inventory_hostname]['OTLP_ENDPOINT'] }}"
      START_INTERVAL_IN_SECONDS: "0.1"
      END_INTERVAL_IN_SECONDS: "0.01"
      METRICS_INTERVAL: "1000"
      NATS_URL: "{{ hostvars[inventory_hostname]['NATS_URL'] }}"
  become: true
  register: simulation_container
